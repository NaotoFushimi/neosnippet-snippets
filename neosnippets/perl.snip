snippet perl
	use 5.20.2;
	use strict;
	use warnings;
	
snippet tech.search_by_sql
	#my $where_statement = join " AND " , map{"$_ = ?"} sort keys %$where;
	#my $update_fields = +{ map { "$_"."_count" => $decoded->{log_type} eq $_  ?  $count : 0  }qw /policy_page wappen_impression wappen_cancel wappen_click/ };
	#my $delta_statement = join "," , map{"$_ = $_ + ?"} sort keys %$update_fields;
	#my $dao = $self->dao('default');
	#my $sql = "UPDATE daily_media_survey_summary 
	#	SET $delta_statement
	#	WHERE $where_statement;
	#";
	#my @bind = ((map{ $update_fields->{$_}  }sort keys %$update_fields) , (map{ $where->{$_} } sort keys %$where));
	#$dao->do($sql, undef , @bind);

snippet use.Data::Dumper;
	use Data::Dumper;
snippet warn.Dumper
	warn Dumper ${1}

snippet keys
	for my $hash_key ( keys %$hash){
		my $hash_value = $hash->{$hash_key};
	}

snippet dbi
	use DBI;
	use DBIx::QueryLog ();
	my $dbh = DBI->connect('DBI:mysql:hoge_db', 'root', 'pass');
	my $sth;
	$sth = $dbh->prepare("SELECT * FROM hoge_table LIMIT ?");
	$sth->execute(1);
			# inserted_id my $rv = $dbh->last_insert_id("anki", "anki", "tag", "id");
	my $array_ref = [];
	while (my $row = $sth->fetchrow_hashref()){
		push @$array_ref , $row;
	}
	$dbh->disconnect;

snippet file_read
	open(DATAFILE, "< ${1:file_path}")) or die("error :$!");
	while (my $line = <DATAFILE>){
	chomp($line);
	print "$line\n";
	}

snippet tech.ltsv
	sub create_ltsv{
		my $hash = ref $_[0] ? $_[0] :  { @_ };
		join "\t" ,map{
			$_. ':' .$hash->{$_};
		}keys $hash;
	}

snippet tech.error
	say STDERR create_ltsv(
		error => $@->message ,
		log_name => $_ , 
		time => time ,
		datetime => localtime(time)->strftime('%Y-%m-%d %H:%M:%S'),
	);

snippet tech.join_stram
	#my $text = join "::", map {$_} (1,2,3,4,5,6);  #$text = 1::2::3::4::5::6
	#my ($promotion_video_id , $media_id , $serial_id , $device_id , $browser_id , $date) = split "::" , $text;

snippet tech.search_dao
	#my $vender = $dao->search('application_vender' , {vender_login_id => $vender_login_id} , {})->all;
	#$p->{vender_id} = [map{$_->id}@$vender];

snippet sub
	sub ${1} {
		my ($input) = @_;
		${2}
	}

snippet config
	use File::Spec;
	my $config = do(File::Spec->catdir(dirname(__FILE__)) . '/../../../config/' . $ENV{PLACK_ENV} . '.pl') or die "config file for $ENV{PLACK_ENV}";

snippet tech.parameter_to_hash
	my $args = "&id=765&age=60&name=naoto";
	my $args_hash = +{map{split("=" , $_ , 2)}split("&" , $args)};
	##$VAR1 = {
	##	  'age' => '60',
	##	  'id' => '765',
	##	  'name' => 'naoto'
	##};

snippet chmod
	use use File::Path::Tiny qw/mk/;
	File::Path::Tiny::mk ($path, 0755);
snippet extend
	#use parent qw(Kuroneco::Model);

snippet time
	#use Time::Piece;
	my $datetime = localtime()->strftime('%Y-%m-%d %H:%M:%S');

snippet json
	#use JSON::XS qw/decode_json encode_json/;
	decode_json encode("utf8" , {});

snippet tech.map1
	my $category = [
		{id => 3, col=>"naoto"},
		{id => 4, col=>"naoto2"},
		{id => 5, col=>"naoto3"},
	];
	
	my $category_hash= {map{$_->{id} => $_->{col}}@$category};
	#$VAR1 = {
	#   '5' => 'naoto3',
	#   '4' => 'naoto2',
	#   '3' => 'naoto'
	#};
snippet tech.deep_copy
	my $hashArray = [
		{"aaa"=>1},
		{"aaa"=>2},
		{"aaa"=>3},
		{"aaa"=>4}
	];
	my $hashArrayCopy = [map {%$_} @$hashArray];

snippet tech.map2
	my @addresses = ('katsuo@example.com', 'wakame@example.com', 'tara@example.com');
	my @no_spam = map { my $email = $_; $email =~ s/\@/ at /; $email } @addresses;
	# @no_spam には ('katsuo at example.com', 'wakame at example.com', 'tara at example.com) が入る。

snippet tech.json_responce
	return $c->json_response([map{$_->get_columns}@$result]);


snippet tech.renban
	my $renban = [map{join("", $_ , $_+1 , $_+2)}0..4];
	#$VAR1 = [
	#	  '012',
	#	  '123',
	#	  '234',
	#	  '345',
	#	  '456',
	#];

snippet tech.grep
	my @cities = ('Sapporo', 'Nishitokyo', 'Yokohama');
	my @prefs  = ('Hokkaido', 'Tokyo', 'Yokohama');
	my %seen;
	my @uniq = grep { ++$seen{$_} < 2 } (@cities, @prefs);
	## @uniq には ('Sapporo', 'Nishitokyo', 'Yokohama', 'Hokkaido', 'Tokyo') が入る

snippet wanon2.dispatcher
	package ${1:AppName}::Web::Dispatcher::${2:FileName};
	use strict;
	use warnings;
	use utf8;
	use Wanon2::Web::Dispatcher::Proxy -from => '$1::Web::Dispatcher';
	
	hook '/' => sub {
		my ($c, $args , $p) = @_;
	};
	1;

snippet wanon2.dispatcher.proxy
   #proxy '/admin' => 'test_lesson::Web::Dispatcher::Admin';

snippet teng.single
	my $dao = $c->dao('default');
	my col = $dao->single('${1:table_name}' , {id => {$2:id}} , {${3:where}}});
	my $filename = $col->${4:data};

snippet teng.all
	my $dao = $c->dao('default');
	my $${1:table_name}_all = $dao->search('$1')->all;
	my $$1_all_id_hash => {map{$_->id => $_->get_columns_for_json}@$$1_all});

snippet teng.group_by
	my $opt = {};
	$opt->{group_by} = "time_unit_unixtime";
	$opt->{columns} = 
		[
			"time_unit_unixtime" , 
			\'SUM(cost_limit_per_hour) as cost_limit_per_hour' , 
			\'MAX(stopped_time) as stopped_time' , 
			\"CASE WHEN is_stopped = 1 THEN '消化' ELSE '未消化' END AS is_stopped",
		];
	my $daily_cost_limit = $dao->search($daily_cost_limit_table_name , $where , $opt)->all; #arrayref

snippet teng.search_by_sql
	my $query = "
		SELECT *
		FROM 
		WHERE 
			year_month_date >= ? 
			AND year_month_date <= ?  
			AND time_unit_unixtime >= ? 
			AND time_unit_unixtime <= ?  
			AND promotion_id = ? 
		GROUP BY time_unit_unixtime , media_id
		";
		
	my $${1} = $dao->search_by_sql($query , [
		$start_year_month_date , 
		$end_year_month_date , 
		$start_time ,
		$end_time ,
		$promotion_id ,
	])->all;
	
	my $${2}_hash = {};
	for(@$1){
		$_ = $_->get_columns;
		my ($media_id , $time_unit_unixtime , $sum) = @$_{qw/media_id time_unit_unixtime sum/};
		$${2}_hash->{$datetime} ||= {};
	}


snippet wanon2.proxy
	package ${1}::Web::Dispatcher;
	use strict;
	use warnings;
	use Wanon2::Web::Dispatcher;
	proxy '/wappen' => '$1::Web::Dispatcher::Wappen';

snippet wanon2.dispatcher
	package ${1:project_name}::Web::Dispatcher::${2:module_name}}{
		use strict;
		use utf8;
		use warnings;
		use Wanon2::Web::Dispatcher::Proxy -from => '$1::Web::Dispatcher';
	
		our $PATH_PREFIX = "/$2"; #ここまでのURLの"フルパス"を書く
	
		proxy '/${3:next_layer}'  => '$1::Web::Dispatcher::$2::$3';
	
		any '/' => sub {
			#http://localhost:xxxx/$1/ でアクセス
			warn "99999999999999999999999999999999";
		};
	
	};
	1;

snippet wanon2.dispatcher.json_responce
	get '/survey/{surveyId:\d+}/' => sub {
		my ($c,$args,$p) = @_;

		my $model = $c->model('Survey');
		my $survey = $model->get_hash($args->{surveyId});

		return $c->json_response($survey);
	};
	
snippet wanon2.model_base

	package ${1:project_name}::Model{
		use parent qw/$1/;
	
		sub c { shift->{c}; }
	
		sub config {
			my ($self, $class) = @_;
			return $self->{c}->config($class);
		}
	}
	1;


snippet wanon2.model
	package ${1:project}::Model::${2:module_name} {
		use 5.16.2;
		use strict;
		use warnings;
		use $1::DAO::DB;
		use Data::Dumper;
		use Time::Piece;
		use Encode qw/encode decode/;
		use JSON::XS qw/encode_json decode_json/;
		use parent qw($1::Model);
	
		sub ${2:function_name} {
	
			my ($self, $data) = @_;
			my $dao = $self->dao('default');
		}
	}
	1;

snippet wanon2.config_base
	#use DBIx::QueryLog;
	use FindBin;
	use HTTP::Session::Store::File;
	use HTTP::Session::State::Cookie;
	use Wanon2::Constant qw(-test);
	
	#DBIx::QueryLog->color('cyan');
	#eval { DBIx::QueryLog->compact(1); };
	#eval { DBIx::QueryLog->compress(1); } if $@;
	
	my $validator = do "$FindBin::Bin/../config/validator.pl" || {};
	
	my $module_name = '${1:project}';
	my $db = lc($module_name);
	
	my $config = +{
		root_dir		 => $FindBin::Bin . '/../',
		nginx_log_dir	=> "/var/log/supervisor/nginx",
	
		DAO => {
			default		=> (do('/var/keys/staging_mainecoon_master_db.pl'))->($db, $mainecoon_db_host),
			slave_db	   => (do('/var/keys/staging_mainecoon_slave_db.pl'))->($db, $mainecoon_db_host),
			qudo		   => (do('/var/keys/staging_mainecoon_qudo_db.pl'))->($db_qudo, $mainecoon_db_host),
			kuroneco_write => (do('/var/keys/staging_kuroneco_write_db.pl'))->($db_kuroneco, $kuroneco_db_host),
			kuroneco_read  => (do('/var/keys/staging_kuroneco_read_db.pl'))->($db_kuroneco, $kuroneco_db_host),
		},  
		'session' => {
			state => HTTP::Session::State::Cookie->new(
				name   => 'http_session_sid' , 
				domain => 'velet.jp' , 
			),
			store => HTTP::Session::Store::File->new(dir => '/tmp'),
		},
		'validator' => $validator,
		'test' => { mode => TEST_MODE_UNIT }
	};
	
	$config;



